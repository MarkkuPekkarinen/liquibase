SET ECHO ON;
WHENEVER SQLERROR EXIT SQL.SQLCODE;
PROMPT "Starting roles.sql"

-- Value passed in from 03_addUsers.sql
SELECT '&1' FROM DUAL;

--CREATE Roles
--Create LIQUIBASE_ROLE
CREATE ROLE LIQUIBASE_ROLE NOT IDENTIFIED;
GRANT ADMINISTER DATABASE TRIGGER TO LIQUIBASE_ROLE;
GRANT ALTER ANY INDEX TO LIQUIBASE_ROLE;
GRANT ALTER ANY MATERIALIZED VIEW TO LIQUIBASE_ROLE;
GRANT ALTER ANY PROCEDURE TO LIQUIBASE_ROLE;
GRANT ALTER ANY SEQUENCE TO LIQUIBASE_ROLE;
GRANT ALTER ANY TABLE TO LIQUIBASE_ROLE;
GRANT ALTER ANY TRIGGER TO LIQUIBASE_ROLE;
GRANT ALTER ANY TYPE TO LIQUIBASE_ROLE;
GRANT ALTER SESSION TO LIQUIBASE_ROLE;
GRANT GRANT ANY OBJECT PRIVILEGE TO LIQUIBASE_ROLE;
GRANT CREATE ANY DIRECTORY TO LIQUIBASE_ROLE;
GRANT CREATE ANY INDEX TO LIQUIBASE_ROLE;
-- Oracle Oddity: Remember to grant "create table" to the schema owner, or Datical will not be able to create materialized views in that schema.
-- ex., GRANT CREATE TABLE TO <schema_owner>;
GRANT CREATE ANY MATERIALIZED VIEW TO LIQUIBASE_ROLE;
GRANT CREATE ANY PROCEDURE TO LIQUIBASE_ROLE;
GRANT CREATE ANY SEQUENCE TO LIQUIBASE_ROLE;
GRANT CREATE ANY SYNONYM TO LIQUIBASE_ROLE;
GRANT CREATE ANY TABLE TO LIQUIBASE_ROLE;
GRANT CREATE ANY TRIGGER TO LIQUIBASE_ROLE;
GRANT CREATE ANY TYPE TO LIQUIBASE_ROLE;
GRANT CREATE ANY VIEW TO LIQUIBASE_ROLE;
GRANT CREATE SESSION TO LIQUIBASE_ROLE;
GRANT DELETE ANY TABLE TO LIQUIBASE_ROLE WITH ADMIN OPTION;
GRANT DROP ANY DIRECTORY TO LIQUIBASE_ROLE;
GRANT DROP ANY INDEX TO LIQUIBASE_ROLE;
GRANT DROP ANY MATERIALIZED VIEW TO LIQUIBASE_ROLE;
GRANT DROP ANY PROCEDURE TO LIQUIBASE_ROLE;
GRANT DROP ANY SEQUENCE TO LIQUIBASE_ROLE;
GRANT DROP ANY SYNONYM TO LIQUIBASE_ROLE;
GRANT DROP ANY TABLE TO LIQUIBASE_ROLE;
GRANT DROP ANY TRIGGER TO LIQUIBASE_ROLE;
GRANT DROP ANY TYPE TO LIQUIBASE_ROLE;
GRANT DROP ANY VIEW TO LIQUIBASE_ROLE;
GRANT EXECUTE ANY PROCEDURE TO LIQUIBASE_ROLE;
GRANT INSERT ANY TABLE TO LIQUIBASE_ROLE;
GRANT SELECT ANY DICTIONARY TO LIQUIBASE_ROLE;
GRANT SELECT ANY SEQUENCE TO LIQUIBASE_ROLE;
GRANT SELECT ANY TABLE TO LIQUIBASE_ROLE;
GRANT UPDATE ANY TABLE TO LIQUIBASE_ROLE ;
GRANT COMMENT ANY TABLE TO LIQUIBASE_ROLE;
-- The following permission are needed for SNAPSHOT, COMPARE, FORECAST on all available schemas
GRANT SELECT ANY TABLE TO LIQUIBASE_ROLE;
GRANT SELECT ANY SEQUENCE TO LIQUIBASE_ROLE;
GRANT EXECUTE ANY PROCEDURE TO LIQUIBASE_ROLE;
GRANT CREATE ANY TRIGGER TO LIQUIBASE_ROLE;
-- The following permissions are needed for auto generation of permissions
GRANT SELECT ANY DICTIONARY TO LIQUIBASE_ROLE;
-- The following permissions are needed for working with EDITIONING VIEWS
GRANT CREATE ANY EDITION TO LIQUIBASE_ROLE;
GRANT DROP ANY EDITION TO LIQUIBASE_ROLE;
-- The following permissions are needed for management of database scoped triggers
GRANT ADMINISTER DATABASE TRIGGER TO LIQUIBASE_ROLE;

-- The following must be run as sysdba
-- SQL > conn / as sysdba
-- The following permissions are needed to capture storage options for SNAPSHOT
GRANT EXECUTE on SYS.DBMS_METADATA TO LIQUIBASE_ROLE;
GRANT EXECUTE ON SYS.UTL_FILE TO LIQUIBASE_ROLE;


-- Create lbuser USER
CREATE USER lbuser IDENTIFIED BY LiquibasePass1
DEFAULT TABLESPACE "USERS"
TEMPORARY TABLESPACE "TEMP"
ACCOUNT UNLOCK;
ALTER USER lbuser QUOTA 100M ON USERS;
GRANT UNLIMITED TABLESPACE TO lbuser WITH ADMIN OPTION;
-- Oracle Oddity: Remember to grant "create table" to the schema owner, or Datical will not be able to create materialized views in that schema.
GRANT CREATE TABLE TO lbuser WITH ADMIN OPTION;
--Grant Section
-- Grant LIQUIBASE_ROLE role to the Datical User
GRANT LIQUIBASE_ROLE to lbuser with ADMIN OPTION;

-- Granting to the specific schema  (not just the role) is required
-- GRANT ALL ON DIRECTORY does not work with Oracle RDS use the following instead
GRANT READ ON DIRECTORY DATA_PUMP_DIR TO lbuser with GRANT OPTION;
GRANT WRITE ON DIRECTORY DATA_PUMP_DIR TO lbuser with GRANT OPTION;
GRANT CREATE SESSION TO lbuser WITH ADMIN OPTION;
GRANT CONNECT, RESOURCE TO lbuser WITH ADMIN OPTION;
GRANT EXP_FULL_DATABASE TO lbuser WITH ADMIN OPTION;
GRANT IMP_FULL_DATABASE TO lbuser WITH ADMIN OPTION;
GRANT SELECT ANY dictionary TO lbuser WITH ADMIN OPTION;
GRANT ALTER SESSION TO lbuser WITH ADMIN OPTION;
GRANT "DBA" TO lbuser;


-- Create lbcat2 USER
-- not sure why this user is needed, but not having it will result in an error. Setting grants the same as lbuser
CREATE USER lbcat2 IDENTIFIED BY LiquibasePass1
DEFAULT TABLESPACE "USERS"
TEMPORARY TABLESPACE "TEMP"
ACCOUNT UNLOCK;
ALTER USER lbcat2 QUOTA 100M ON USERS;
GRANT UNLIMITED TABLESPACE TO lbcat2 WITH ADMIN OPTION;
-- Oracle Oddity: Remember to grant "create table" to the schema owner, or Datical will not be able to create materialized views in that schema.
GRANT CREATE TABLE TO lbcat2 WITH ADMIN OPTION;
--Grant Section
-- Grant LIQUIBASE_ROLE role to the Datical User
GRANT LIQUIBASE_ROLE to lbcat2 with ADMIN OPTION;

-- Granting to the specific schema  (not just the role) is required
-- GRANT ALL ON DIRECTORY does not work with Oracle RDS use the following instead
GRANT READ ON DIRECTORY DATA_PUMP_DIR TO lbcat2 with GRANT OPTION;
GRANT WRITE ON DIRECTORY DATA_PUMP_DIR TO lbcat2 with GRANT OPTION;
GRANT CREATE SESSION TO lbcat2 WITH ADMIN OPTION;
GRANT CONNECT, RESOURCE TO lbcat2 WITH ADMIN OPTION;
GRANT EXP_FULL_DATABASE TO lbcat2 WITH ADMIN OPTION;
GRANT IMP_FULL_DATABASE TO lbcat2 WITH ADMIN OPTION;
GRANT SELECT ANY dictionary TO lbcat2 WITH ADMIN OPTION;
GRANT ALTER SESSION TO lbcat2 WITH ADMIN OPTION;

-- try adding dba back to lbcat2 to fix things:
GRANT "DBA" TO lbcat2;


PROMPT "roles.sql complete"